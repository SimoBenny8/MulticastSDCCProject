// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.17.3
// source: packet_message.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PacketServiceClient is the client API for PacketService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PacketServiceClient interface {
	SendPacket(ctx context.Context, in *Packet, opts ...grpc.CallOption) (*ResponsePacket, error)
}

type packetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPacketServiceClient(cc grpc.ClientConnInterface) PacketServiceClient {
	return &packetServiceClient{cc}
}

func (c *packetServiceClient) SendPacket(ctx context.Context, in *Packet, opts ...grpc.CallOption) (*ResponsePacket, error) {
	out := new(ResponsePacket)
	err := c.cc.Invoke(ctx, "/PacketService/SendPacket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PacketServiceServer is the server API for PacketService service.
// All implementations must embed UnimplementedPacketServiceServer
// for forward compatibility
type PacketServiceServer interface {
	SendPacket(context.Context, *Packet) (*ResponsePacket, error)
	mustEmbedUnimplementedPacketServiceServer()
}

// UnimplementedPacketServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPacketServiceServer struct {
}

func (UnimplementedPacketServiceServer) SendPacket(context.Context, *Packet) (*ResponsePacket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPacket not implemented")
}
func (UnimplementedPacketServiceServer) mustEmbedUnimplementedPacketServiceServer() {}

// UnsafePacketServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PacketServiceServer will
// result in compilation errors.
type UnsafePacketServiceServer interface {
	mustEmbedUnimplementedPacketServiceServer()
}

func RegisterPacketServiceServer(s grpc.ServiceRegistrar, srv PacketServiceServer) {
	s.RegisterService(&PacketService_ServiceDesc, srv)
}

func _PacketService_SendPacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Packet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PacketServiceServer).SendPacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PacketService/SendPacket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PacketServiceServer).SendPacket(ctx, req.(*Packet))
	}
	return interceptor(ctx, in, info, handler)
}

// PacketService_ServiceDesc is the grpc.ServiceDesc for PacketService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PacketService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PacketService",
	HandlerType: (*PacketServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendPacket",
			Handler:    _PacketService_SendPacket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "packet_message.proto",
}
